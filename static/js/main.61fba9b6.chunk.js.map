{"version":3,"sources":["assets/jackpots-lose.png","config.js","utils.js","store.js","components/utils/DropdownInput.js","components/PlayGround.js","App.js","serviceWorker.js","index.js","assets/jackpots-win.png","assets/jackpots.png"],"names":["module","exports","LEVELS","TRIALS","EASY","MEDIUM","HARD","randomInt","min","max","arguments","length","Math","floor","random","randomSample","population","k","sample","Array","i","rnd_pos","splice","makeEasyGame","n_arms","probs","makeHardGame","best_prob","distances","newProb","best","distance","round","pop","two_rnd_pos","range","start","end","getProbabilityVector","level","makeGame","Wrapper","styled","div","DropdownDiv","DropdownButton","Input","MenuItem","DropdownInput","menu","value","onChange","useState","dropdownOpen","setDropdownOpen","tabIndex","onBlur","evt","className","onClick","icon","faChevronDown","map","menuOption","index","onSelectItem","key","RestartButton","ResultsWrapper","Result","SlotMachinesWrapper","props","isEnabled","Text","WinProbabilityText","FinishedGame","MachineWrapper","isFinished","winProbability","maxProbability","isClickable","WinProbability","Header","useContext","Context","trialsLeft","totalCoins","selectLevel","faChevronLeft","SlotMachine","onMachineOutput","selectBestMachine","jackpot","selectedImage","setSelectedImage","timeoutRef","setTimeoutRef","useEffect","clearTimeout","jackpotWin","onMachineClick","a","didWin","jackpotLose","timeout","setTimeout","draggable","width","src","alt","PlayGround","winProbabilityVector","restartGame","PrimaryButton","size","Title","Container","Instructions","DropdownWrapper","PlayGroundWrapper","StartButtonWrapper","PresentationImgWrapper","React","createContext","TITLE","PresentationView","setLevel","setIsPlaying","App","store","isPlaying","setWinProbabilityVector","results","setResults","setRewards","setBestArm","setTrialsLeft","setTotalCoins","setIsFinished","setSelectedMachine","probabilityVector","bestMachine","forEach","probability","console","log","coins","trials","useStore","document","title","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61fba9b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jackpots-lose.7162d89e.png\";","export const instructions = `\n  Lorem Ipsum es simplemente el texto de relleno de las imprentas y archivos\n  de texto. Lorem Ipsum ha sido el texto de relleno estándar de las industrias\n  desde el año 1500, cuando un impresor (N. del T. persona que se dedica a la imprenta) \n  desconocido usó una galería de textos y los mezcló de tal manera que logró hacer un\n  libro de textos especimen. No sólo sobrevivió 500 años, sino que tambien ingresó\n  como texto de relleno en documentos electrónicos, quedando esencialmente\n  igual al original. Fue popularizado en los 60s con la creación de las hojas\n  \"Letraset\", las cuales contenian pasajes de Lorem Ipsum, y más recientement\n`\nexport const LEVELS = {\n  EASY: 'Easy',\n  MEDIUM: 'Medium', \n  HARD:'Hard'\n}\n\nexport const TRIALS = {\n  [LEVELS.EASY]: 15,\n  [LEVELS.MEDIUM]: 30,\n  [LEVELS.HARD]: 30\n}\n","import { LEVELS } from './config'\nconst { EASY, MEDIUM, HARD } = LEVELS \n\nfunction randomInt() {\n  // Max excluded\n  let min = 0\n  let max = 1\n  if (arguments.length == 1) {\n    max = arguments[0]\n  } else if (arguments.length > 1) {\n    min = arguments[0]\n    max = arguments[1]\n  }\n\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n\nfunction randomSample(population, k) {\n  let sample = new Array(k)\n  for (let i = 0; i < k; i++) {\n    let rnd_pos = randomInt(population.length)\n    sample[i] = population[rnd_pos]\n    population.splice(rnd_pos, 1)\n  }\n  return sample\n}\n\nfunction range(start, end) {\n  // End included\n  if (end < start) {\n    return []\n  }\n  //From: https://dev.to/ycmjason/how-to-create-range-in-javascript-539i\n  if (start === end) return [start];\n  return [start, ...range(start + 1, end)];\n}\n\n\nfunction makeEasyGame(n_arms) {\n  let probs = randomSample([0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.3, 0.4], n_arms)\n  probs[randomInt(n_arms)] = 0.8\n  return probs\n}\n\n\nfunction makeHardGame(n_arms) {\n  let probs = new Array(n_arms)\n\n  let best_prob = randomSample([0.7, 0.8, 0.9], 1)[0]\n  let distances = randomSample([0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4, 0.5, 0.6], n_arms)\n\n\n  function newProb(best, distance) {\n    return Math.round((best - distance) * 100) / 100\n  }\n\n  for (let i = 0; i < n_arms; i++) {\n    probs[i] = newProb(best_prob, distances.pop())\n  }\n\n\n  let two_rnd_pos = randomSample(range(0, n_arms - 1), 2)\n\n  //Close to best arm\n  probs[two_rnd_pos[0]] = newProb(best_prob, randomSample([0.1, 0.2, 0.2, 0.3], 1)[0])\n\n  //Winning arm\n  probs[two_rnd_pos[1]] = best_prob\n\n  return probs\n}\n\n\nexport function makeGame(level) {\n  switch (level) {\n    case EASY:\n      return makeEasyGame(3)\n    case MEDIUM:\n      return makeEasyGame(5)\n    case HARD:\n      return makeHardGame(5)\n    default:\n      return []\n  }\n}\n\n\nfunction getArmReward(probs, arm_position) {\n  let arm_prob = probs[arm_position]\n\n  if (Math.random() < arm_prob) {\n    return 1\n  } else {\n    return 0\n  }\n\n}","import { useState, useEffect } from 'react'\nimport { LEVELS, TRIALS } from './config'\nimport { makeGame } from './utils'\n\nconst { EASY, MEDIUM, HARD } = LEVELS \n\nconst getProbabilityVector = (level) => {\n  return makeGame(level)\n}\n\nexport const useStore = () => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [winProbabilityVector, setWinProbabilityVector] = useState([]) \n  const [level, setLevel] = useState(EASY)\n  const [results, setResults] = useState([]);\n  const [rewards, setRewards] = useState([]);\n  const [bestArm, setBestArm] = useState([]);\n  const [trialsLeft, setTrialsLeft] = useState(TRIALS[EASY]);\n  const [totalCoins, setTotalCoins] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n  const [selectedMachine, setSelectedMachine] = useState(null);\n\n  useEffect(()=>{\n    const probabilityVector = getProbabilityVector(level)\n    setWinProbabilityVector(probabilityVector)\n    setTrialsLeft(TRIALS[level])\n  },[level]);\n\n  let maxProbability = 0\n  let bestMachine = 0\n  winProbabilityVector.forEach((probability, index) => {\n    if (probability > maxProbability) {\n      bestMachine = index\n      maxProbability = probability\n    }\n  });\n\n  useEffect(()=>{\n    if(trialsLeft === 0){\n      console.log(results)\n    }\n  },[trialsLeft]);\n\n  const selectLevel = () => {\n    setIsPlaying(false)\n    restartGame()\n  }\n\n  const restartGame = () => {\n    const probabilityVector = getProbabilityVector(level)\n    setWinProbabilityVector(probabilityVector)\n    setRewards([])\n    setBestArm([])\n    setResults([])\n    setTotalCoins(0)\n    setTrialsLeft(TRIALS[level])\n    setIsFinished(false)\n    setSelectedMachine(null)\n  }\n\n  const selectBestMachine = (index) => {\n    setIsFinished(true)\n    setSelectedMachine(index)\n  }\n\n  const onMachineOutput = (didWin) => {\n    if(didWin)\n      setTotalCoins(coins => coins+1)\n    setTrialsLeft(trials => trials-1)\n    setResults(results => [...results, didWin])\n  }\n\n  // [state, actions]\n  return [{\n    trialsLeft,\n    totalCoins,\n    bestMachine,\n    maxProbability,\n    level,\n    isPlaying,\n    isFinished,\n    winProbabilityVector,\n  },\n  {\n    selectLevel,\n    selectBestMachine,\n    onMachineOutput,\n    restartGame,\n    setIsPlaying,\n    setLevel\n  }];\n};\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons'\n\nconst Wrapper = styled.div`\n  z-index: 1000;\n  position: relative;\n`\n\nconst DropdownDiv = styled.div`\n  background-color: white;\n  border: solid 1px #5F6368;\n  position: absolute;\n  box-shadow: 0 2px 10px 0 rgba(14, 72, 141, 0.04);\n  border-radius: 4px;\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  -ms-border-radius: 4px;\n  -o-border-radius: 4px;\n  max-height:250px;\n  overflow-y:scroll;\n`\n\nconst DropdownButton = styled.div`\n  outline: none;\n  color: #5F6368;\n`\n\nconst Input = styled.div`\n\tbox-sizing: border-box;\n  height: 32px;\n  font-weight: bold;\n  font-size: 14px;\n  width: 100%;\n\tborder: 1px solid #5F6368;\n  border-radius:2px;\n  background-color: white ;\n  :hover{\n    cursor:pointer;\n    opacity:0.8;\n  }\n`\n\nconst MenuItem = styled.div`\n  font-size: 14px;\n  height:35px;\n  user-select: none;\n  :hover{\n    cursor:pointer;\n    color:#1F78B4;\n  }\n`\n\nconst DropdownInput = ({ menu, value, onChange }) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false)\n  const onBlur = (evt) => { setDropdownOpen(false) }\n\n  const onSelectItem = (index) => {\n    onChange(menu[index])\n    setDropdownOpen(false)\n  }\n\n  return (<div>\n    <DropdownButton tabIndex={0} onBlur={onBlur} className='w-100'>\n      <div onClick={() => setDropdownOpen(true)} className='navigation-bar__profile-icon d-flex align-items-center justify-content-center'>\n        <Input className='d-flex align-items-center justify-content-between'>\n          <div className='ml-3'>\n            {value}\n          </div>\n          <div className='mr-2 mt-1'>\n            <FontAwesomeIcon icon={faChevronDown} />\n          </div>\n        </Input>\n      </div>\n      {dropdownOpen && <Wrapper className='w-100'>\n        <DropdownDiv className='w-100'>\n          {menu && <div>\n            {menu.map((menuOption, index) => (\n              <MenuItem\n                className='d-flex align-items-center'\n                onClick={() => onSelectItem(index)} key={index}>\n                <div className='ml-3'>\n                  {menuOption}\n                </div>\n              </MenuItem>))}\n          </div>}\n        </DropdownDiv>\n      </Wrapper>}\n    </DropdownButton>\n  </div>\n  )\n}\n\nexport default DropdownInput\n\n","import React, { useContext, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Context, PrimaryButton } from '../App'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\nimport jackpotWin from '../assets/jackpots-win.png'\nimport jackpotLose from '../assets/jackpots-lose.png'\nimport jackpot from '../assets/jackpots.png'\n\nconst RestartButton = styled.div`\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResultsWrapper = styled.div`\n  font-size: 14px;\n`\n\nconst Result = styled.div`\n  font-weight: bold;\n  color: #C57633;\n`\n\nconst SlotMachinesWrapper = styled.div`\n  ${(props) => {return !props.isEnabled? `\n    pointer-events: none;\n  `: ''}}\n`\n\nconst Text = styled.div`\n  font-weight: bold;\n  font-size: 17px;\n`\n\nconst WinProbabilityText = styled(Text)`\n  margin-top: 50px;\n  position: absolute;\n`\n\nconst FinishedGame = styled.div`\n  margin-top: 22px;\n`\n\nconst MachineWrapper = styled.div`\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.9;\n  }\n  ${(props) => {\n    return props.isFinished ? `\n    opacity: ${props.winProbability / props.maxProbability};\n  `: ''\n  }}\n  ${(props) => {\n    return !props.isClickable ? `\n    pointer-events: none;\n  `: ''\n  }}\n`\n\nconst WinProbability = styled.div`\n  font-size: 15px;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  margin-top: 2px;\n  margin-left: 3px;\n`\n\nconst PlayGround = () => {\n  const [{\n    isFinished,\n    trialsLeft,\n    winProbabilityVector\n  },{\n    restartGame\n  }] = useContext(Context);\n\n  return (<div>\n    <Header/>\n    <div className='position-relative w-100 d-flex align-items-center justify-content-center'>\n      {isFinished && \n        <WinProbabilityText className='d-flex align-items-center justify-content-center'> \n          Win Probabilities: \n        </WinProbabilityText>}\n    </div>\n    <SlotMachinesWrapper isEnabled={!isFinished} className='d-flex align-items-center justify-content-center mt-5'>\n      {winProbabilityVector.map((winProbability, index) => (<div key={index}>\n        <SlotMachine index={index} isEnabled={trialsLeft > 0} winProbability={winProbability}/>\n      </div>))}\n    </SlotMachinesWrapper>\n    {trialsLeft === 0 && !isFinished && <Text className='mt-4 d-flex align-items-center justify-content-center'>\n      Which slot machine was the best?\n    </Text>}\n    {isFinished && <FinishedGame className='d-flex align-items-center justify-content-center'>\n      <PrimaryButton size='small' onClick={restartGame}> PLAY AGAIN </PrimaryButton>\n    </FinishedGame>}\n  </div>)\n} \n\nconst Header = () => {\n  const [{\n    trialsLeft,\n    totalCoins,\n  }, {\n    selectLevel\n  }] = useContext(Context);\n\n  return (\n    <div className='d-flex justify-content-between'>\n      <RestartButton className='ml-3 mt-3' onClick={() => selectLevel()}>\n        <FontAwesomeIcon className='mr-1' icon={faChevronLeft} /> Select Level\n      </RestartButton>\n      <ResultsWrapper className='d-flex mt-3 mr-3'>\n        <div className='mr-1'> Trials left: </div>\n        <Result className='font-weight-bold'>{trialsLeft}</Result>\n        <div className='ml-3 mr-1'> Total Coins: </div>\n        <Result className='font-weight-bold'>{totalCoins}</Result>\n      </ResultsWrapper>\n    </div>)\n}\n\nconst SlotMachine = ({ index, winProbability }) => {\n  const [{\n    maxProbability,\n    isFinished,\n    trialsLeft\n  }, {\n    onMachineOutput,\n    selectBestMachine,\n  }] = useContext(Context);\n\n  const [selectedImage, setSelectedImage] = useState(jackpot);\n  const [timeoutRef, setTimeoutRef] = useState(null);\n\n  useEffect(()=>{\n    if(isFinished){\n      clearTimeout(timeoutRef)\n      setSelectedImage(jackpotWin)\n    }\n    else\n      setSelectedImage(jackpot)\n  },[isFinished]);\n\n  const formattedWinProbability = () => {\n    return Math.floor(winProbability*100)+'%'\n  }\n\n  const onMachineClick = async () => {\n    if(trialsLeft > 0){\n      let didWin = false\n      if (Math.random() < winProbability)\n        didWin = true\n      if(didWin){\n        setSelectedImage(jackpotWin)\n      }\n      else{\n        setSelectedImage(jackpotLose)\n      }\n      onMachineOutput(didWin)\n      let timeout = setTimeout(() => setSelectedImage(jackpot), 1000);\n      setTimeoutRef(timeout)\n    }\n    else{\n      selectBestMachine(index)\n    }\n  }\n\n  return (<MachineWrapper\n    maxProbability={maxProbability}\n    isFinished={isFinished}\n    winProbability={winProbability}\n    isClickable={selectedImage === jackpot} \n    onClick={onMachineClick}>\n    <img draggable={false} width=\"120px\" src={selectedImage} alt=''/>\n    {isFinished && <WinProbability> {formattedWinProbability()}</WinProbability>}\n  </MachineWrapper>)\n}\n\nexport default PlayGround","import React, { useContext, useEffect } from 'react';\nimport { useStore } from './store'\nimport styled from 'styled-components'\nimport DropdownInput from './components/utils/DropdownInput'\nimport PlayGround from './components/PlayGround'\nimport { instructions, LEVELS } from './config'\nimport jackpotWin from './assets/jackpots-win.png'\nimport Helmet from 'helmet'\nimport './App.css'\n\nconst Title = styled.div`\n  font-size: 24px;\n  font-weight:bold;\n  color: #034B7B;\n`\n\nconst Wrapper = styled.div`\n  font-size: 14px;\n  font-family: 'Roboto', sans-serif;\n  color: #5F6368;\n  width: 650px;\n`\n\nconst Container = styled.div`\n  height:100vh;\n  width:100vw;\n  display: flex;\n  justify-content: center;\n`\n\nconst Instructions = styled.div`\n  font-size: 14px;\n  color: #5F6368;\n`\n\nconst DropdownWrapper = styled.div`\n  margin-top: 15px;\n  margin-left: 15px;\n  width: 180px;\n`\n\nconst PlayGroundWrapper = styled.div`\n  background-color: #f8f8f8;\n  border: solid 1px white ;\n  border-radius: 8px;\n  width: 100%;\n  height: 280px;\n  margin-top: 20px;\n`\n\nexport const PrimaryButton = styled.div`\n  height: ${(props) => { return props.size === 'small' ? '35px' : '40px'}} ;\n  width: ${(props) => { return props.size === 'small' ? '120px' : '200px'}} ;\n  margin-top:6px;\n  font-weight: bold;\n  border-radius: 4px;\n  color:white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  background-color: #1A7DA9;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst StartButtonWrapper = styled.div`\n  margin-top: 10px;\n  width:100%;\n`\n\nconst PresentationImgWrapper = styled.div`\n  width: 150px;\n`\n\nexport const Context = React.createContext();\n\nconst { EASY, MEDIUM, HARD } = LEVELS \nconst TITLE = 'Slot Machine Game'\n\nconst App = () => {\n  const store = useStore();\n  const [\n    { isPlaying }\n  ] = store;\n\n  useEffect(()=>{\n    document.title = TITLE\n  },[]);\n\n  return (<Context.Provider value={store}>\n      <Helmet>\n      <title>{TITLE}</title>\n      </Helmet>\n      <Container>\n      <Wrapper>\n        <Title className='d-flex align-items-center justify-content-center mb-3 mt-5'> {TITLE} </Title>\n        <Instructions> {instructions} </Instructions>\n        <PlayGroundWrapper>\n          {!isPlaying && <div>\n            <PresentationView/> \n            </div>}\n          {isPlaying && <div> \n            <PlayGround /> \n          </div>}\n        </PlayGroundWrapper>\n      </Wrapper>\n    </Container>\n  </Context.Provider>)\n}\n\nconst PresentationView = () => {\n  const [{\n    level,\n  },{\n    setLevel,\n    setIsPlaying\n  }] = useContext(Context);\n  \n  return (<div>\n    <DropdownWrapper>\n      <div className='font-weight-bold mb-1'>Select Level:</div>\n      <DropdownInput\n        value={level}\n        menu={[EASY, MEDIUM, HARD]}\n        onChange={(value) => setLevel(value)} />\n    </DropdownWrapper>\n    <div className='w-100 d-flex align-items-center justify-content-center'>\n      <PresentationImgWrapper>\n        <img width='150px' src={jackpotWin} alt='' />\n      </PresentationImgWrapper>\n    </div>\n    <StartButtonWrapper className='d-flex align-items-center justify-content-center'>\n      <PrimaryButton onClick={() => { setIsPlaying(true) }}> START! </PrimaryButton>\n    </StartButtonWrapper>\n  </div>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/jackpots-win.fcf3250b.png\";","module.exports = __webpack_public_path__ + \"static/media/jackpots.855225d8.png\";"],"sourceRoot":""}